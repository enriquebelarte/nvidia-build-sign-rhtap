apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: signer-container
spec:
  params:
    - name: enriquesecret
      type: string
      default: "awsenriqueauth"
    - name: kms-key-id
      type: string
      default: "kms-test-key"
    - name: IMAGE_URL
    - name: IMAGE_DIGEST
    - name: drivername
      type: string
      default: "nvidia"
    - name: driverversion
      type: string
      default: "535.104.105"
    - name: quay-credentials
      type: string
      default: "quay-enrique-config-json"
    - name: built-path
      type: string
      default: "open-gpu-kernel-modules/kernel-open"
    - name: rh-activation-key
      type: string
      default: "rh-activation-key"

  workspaces:
    - name: buildmodules


  steps:
    - name: copy-files
      image: $(params.IMAGE_URL)
      script: |
        #!/usr/bin/env bash
        set -x
        mkdir /workspace/buildmodules/files
        cp -rp /home/builder/$BUILT_PATH/*.ko /workspace/buildmodules/files
  
      env:
        - name: IMAGE_URL
          value: $(params.IMAGE_URL)
        - name: BUILT_PATH
          value: $(params.built-path)
        
  
    - name: signer-container
      #image: quay.io/ebelarte/aws-kms-pkcs11-signer:ubi8-1.1
      image: registry.access.redhat.com/ubi8/ubi
      script: |
        #!/usr/bin/env bash
        set -x
        subscription-manager register --org="$ORG_ID" --activationkey="$KEY_ID"
        dnf update
        echo "AWS_KMS_KEY_ID:  $AWS_KMS_KEY_ID"
        export KMS_TOKEN=$(echo $AWS_KMS_KEY_ID | cut -c1-32)
        # Configure PKCS11 
        # Add pkcs11 configuration to openssl.cnf
        sed  -i '1i openssl_conf = openssl_init' /etc/pki/tls/openssl.cnf 
        cat /etc/aws-kms-pkcs11/openssl-pkcs11.conf >> /etc/pki/tls/openssl.cnf
        # Set AWS KMS Token ID from variable
        sed -i "s/MY_KMS_ID/$AWS_KMS_KEY_ID/g" /etc/aws-kms-pkcs11/config.json
        # Set the module path
        export PKCS11_MODULE_PATH=/usr/lib64/pkcs11/aws_kms_pkcs11.so
        # Create the public x509 certificate for later signing process
        openssl req -config /etc/aws-kms-pkcs11/x509.genkey -x509 -key "pkcs11:model=0;manufacturer=aws_kms;serial=0;token=$KMS_TOKEN" -keyform engine -engine pkcs11 -out /etc/aws-kms-pkcs11/mycert.pem -days 36500
        # Binary to /usr/src/kernels/x.y.z/scripts/sign-file        
        sign_file="/bin/sign-file"
        # Loop through each .ko file in the directory
        directory="/workspace/buildmodules/files"
        for file in "$directory"/*.ko; do
            #Check if there are matching files
            if [ -e "$file" ]; then
            #Sign each module file
            signedfile="$directory/$(basename ${file%.*})-signed.ko"
            "$sign_file" sha256 "pkcs11:model=0;manufacturer=aws_kms;serial=0;token=$KMS_TOKEN" /etc/aws-kms-pkcs11/mycert.pem "$file" "$signedfile"
              else
            echo "No .ko files found in the directory"
            exit 1
                      fi
            done
                

      env:
        - name: IMAGE_URL
          value: $(params.IMAGE_URL)
        - name: IMAGE_DIGEST
          value: $(params.IMAGE_DIGEST)
        - name: SOURCE_PATH
          value: $(workspaces.buildmodules.path)
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.enriquesecret)
              key: "AWS_ACCESS_KEY_ID"
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.enriquesecret)
              key: "AWS_SECRET_ACCESS_KEY"
        - name: AWS_KMS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.kms-key-id)
              key: "AWS_KMS_KEY_ID"
        - name: ORG_ID
          valueFrom:
            secretKeyRef:
              name: $(params.rh-activation-key)
              key: "ORG_ID"
        - name: KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.rh-activation-key)
              key: "KEY_ID"

    - name: create-signedfiles-image
      image: gcr.io/kaniko-project/executor:debug  
      script: |
        cd /workspace/buildmodules/files
        echo "FROM registry.access.redhat.com/ubi8/ubi-minimal:latest" > /workspace/buildmodules/files/Dockerfile
        echo "WORKDIR /drivers" >> /workspace/buildmodules/files/Dockerfile
        echo "COPY . /drivers" >> /workspace/buildmodules/files/Dockerfile
        echo $QUAY_CONFIG_JSON > /kaniko/.docker/config.json
        /kaniko/executor \
        --context "$(pwd)" \
        --dockerfile "$(pwd)/Dockerfile" \
        --destination "quay.io/ebelarte/rhtap-bundles:$DRIVER_NAME-$DRIVER_VERSION"

      env:
        - name: DRIVER_NAME
          value: $(params.drivername)                
        - name: DRIVER_VERSION
          value: $(params.driverversion)
        - name: QUAY_CONFIG_JSON
          valueFrom:
            secretKeyRef:
              name: $(params.quay-credentials)
              key: "config.json"

